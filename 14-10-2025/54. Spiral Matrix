class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        int n = matrix.size();
        if (n == 0) return {};
        int m = matrix[0].size();
        
        int top = 0, bottom = n - 1;
        int left = 0, right = m - 1;
        
        vector<int> ans;
        
        while (top <= bottom && left <= right) {
            // top row
            for (int i = left; i <= right; i++) 
                ans.push_back(matrix[top][i]);
            top++;  // move top boundary down
            
            // right column
            for (int i = top; i <= bottom; i++) 
                ans.push_back(matrix[i][right]);
            right--;  // move right boundary left
            
            // bottom row (check if still valid)
            if (top <= bottom) {
                for (int i = right; i >= left; i--) 
                    ans.push_back(matrix[bottom][i]);
                bottom--;  // move bottom boundary up
            }
            
            // left column (check if still valid)
            if (left <= right) {
                for (int i = bottom; i >= top; i--) 
                    ans.push_back(matrix[i][left]);
                left++;  // move left boundary right
            }
        }
        
        return ans;
    }
};
